#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuhovenstvoNET.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Eparhia")]
	public partial class dbmlEparhiaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonType(PersonType instance);
    partial void UpdatePersonType(PersonType instance);
    partial void DeletePersonType(PersonType instance);
    #endregion
		
		public dbmlEparhiaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EparhiaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbmlEparhiaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbmlEparhiaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbmlEparhiaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbmlEparhiaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonType> PersonTypes
		{
			get
			{
				return this.GetTable<PersonType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _Foreghn;
		
		private string _PostIndex;
		
		private string _Oblast;
		
		private string _City;
		
		private string _Pole2;
		
		private string _Pole1;
		
		private string _Persone;
		
		private string _Famile;
		
		private string _Name;
		
		private string _Name2;
		
		private string _dop;
		
		private string _Entitu;
		
		private string _Street;
		
		private string _Description;
		
		private string _WrittenRequest;
		
		private string _Congratulations;
		
		private int _Id_PersonType;
		
		private string _Desiderate;
		
		private EntityRef<PersonType> _PersonType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForeghnChanging(System.Nullable<bool> value);
    partial void OnForeghnChanged();
    partial void OnPostIndexChanging(string value);
    partial void OnPostIndexChanged();
    partial void OnOblastChanging(string value);
    partial void OnOblastChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPole2Changing(string value);
    partial void OnPole2Changed();
    partial void OnPole1Changing(string value);
    partial void OnPole1Changed();
    partial void OnPersoneChanging(string value);
    partial void OnPersoneChanged();
    partial void OnFamileChanging(string value);
    partial void OnFamileChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnName2Changing(string value);
    partial void OnName2Changed();
    partial void OndopChanging(string value);
    partial void OndopChanged();
    partial void OnEntituChanging(string value);
    partial void OnEntituChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWrittenRequestChanging(string value);
    partial void OnWrittenRequestChanged();
    partial void OnCongratulationsChanging(string value);
    partial void OnCongratulationsChanged();
    partial void OnId_PersonTypeChanging(int value);
    partial void OnId_PersonTypeChanged();
    partial void OnDesiderateChanging(string value);
    partial void OnDesiderateChanged();
    #endregion
		
		public Person()
		{
			this._PersonType = default(EntityRef<PersonType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foreghn", DbType="Bit")]
		public System.Nullable<bool> Foreghn
		{
			get
			{
				return this._Foreghn;
			}
			set
			{
				if ((this._Foreghn != value))
				{
					this.OnForeghnChanging(value);
					this.SendPropertyChanging();
					this._Foreghn = value;
					this.SendPropertyChanged("Foreghn");
					this.OnForeghnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostIndex", DbType="NVarChar(MAX)")]
		public string PostIndex
		{
			get
			{
				return this._PostIndex;
			}
			set
			{
				if ((this._PostIndex != value))
				{
					this.OnPostIndexChanging(value);
					this.SendPropertyChanging();
					this._PostIndex = value;
					this.SendPropertyChanged("PostIndex");
					this.OnPostIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oblast", DbType="NVarChar(MAX)")]
		public string Oblast
		{
			get
			{
				return this._Oblast;
			}
			set
			{
				if ((this._Oblast != value))
				{
					this.OnOblastChanging(value);
					this.SendPropertyChanging();
					this._Oblast = value;
					this.SendPropertyChanged("Oblast");
					this.OnOblastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pole2", DbType="NVarChar(MAX)")]
		public string Pole2
		{
			get
			{
				return this._Pole2;
			}
			set
			{
				if ((this._Pole2 != value))
				{
					this.OnPole2Changing(value);
					this.SendPropertyChanging();
					this._Pole2 = value;
					this.SendPropertyChanged("Pole2");
					this.OnPole2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pole1", DbType="NVarChar(MAX)")]
		public string Pole1
		{
			get
			{
				return this._Pole1;
			}
			set
			{
				if ((this._Pole1 != value))
				{
					this.OnPole1Changing(value);
					this.SendPropertyChanging();
					this._Pole1 = value;
					this.SendPropertyChanged("Pole1");
					this.OnPole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Persone", DbType="NVarChar(MAX)")]
		public string Persone
		{
			get
			{
				return this._Persone;
			}
			set
			{
				if ((this._Persone != value))
				{
					this.OnPersoneChanging(value);
					this.SendPropertyChanging();
					this._Persone = value;
					this.SendPropertyChanged("Persone");
					this.OnPersoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Famile", DbType="NVarChar(MAX)")]
		public string Famile
		{
			get
			{
				return this._Famile;
			}
			set
			{
				if ((this._Famile != value))
				{
					this.OnFamileChanging(value);
					this.SendPropertyChanging();
					this._Famile = value;
					this.SendPropertyChanged("Famile");
					this.OnFamileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name2", DbType="NVarChar(MAX)")]
		public string Name2
		{
			get
			{
				return this._Name2;
			}
			set
			{
				if ((this._Name2 != value))
				{
					this.OnName2Changing(value);
					this.SendPropertyChanging();
					this._Name2 = value;
					this.SendPropertyChanged("Name2");
					this.OnName2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dop", DbType="NVarChar(MAX)")]
		public string dop
		{
			get
			{
				return this._dop;
			}
			set
			{
				if ((this._dop != value))
				{
					this.OndopChanging(value);
					this.SendPropertyChanging();
					this._dop = value;
					this.SendPropertyChanged("dop");
					this.OndopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entitu", DbType="NVarChar(MAX)")]
		public string Entitu
		{
			get
			{
				return this._Entitu;
			}
			set
			{
				if ((this._Entitu != value))
				{
					this.OnEntituChanging(value);
					this.SendPropertyChanging();
					this._Entitu = value;
					this.SendPropertyChanged("Entitu");
					this.OnEntituChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(MAX)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WrittenRequest", DbType="NVarChar(MAX)")]
		public string WrittenRequest
		{
			get
			{
				return this._WrittenRequest;
			}
			set
			{
				if ((this._WrittenRequest != value))
				{
					this.OnWrittenRequestChanging(value);
					this.SendPropertyChanging();
					this._WrittenRequest = value;
					this.SendPropertyChanged("WrittenRequest");
					this.OnWrittenRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Congratulations", DbType="NVarChar(MAX)")]
		public string Congratulations
		{
			get
			{
				return this._Congratulations;
			}
			set
			{
				if ((this._Congratulations != value))
				{
					this.OnCongratulationsChanging(value);
					this.SendPropertyChanging();
					this._Congratulations = value;
					this.SendPropertyChanged("Congratulations");
					this.OnCongratulationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_PersonType", DbType="Int NOT NULL")]
		public int Id_PersonType
		{
			get
			{
				return this._Id_PersonType;
			}
			set
			{
				if ((this._Id_PersonType != value))
				{
					if (this._PersonType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_PersonTypeChanging(value);
					this.SendPropertyChanging();
					this._Id_PersonType = value;
					this.SendPropertyChanged("Id_PersonType");
					this.OnId_PersonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desiderate", DbType="NVarChar(MAX)")]
		public string Desiderate
		{
			get
			{
				return this._Desiderate;
			}
			set
			{
				if ((this._Desiderate != value))
				{
					this.OnDesiderateChanging(value);
					this.SendPropertyChanging();
					this._Desiderate = value;
					this.SendPropertyChanged("Desiderate");
					this.OnDesiderateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonType_Person", Storage="_PersonType", ThisKey="Id_PersonType", OtherKey="Id", IsForeignKey=true)]
		public PersonType PersonType
		{
			get
			{
				return this._PersonType.Entity;
			}
			set
			{
				PersonType previousValue = this._PersonType.Entity;
				if (((previousValue != value) 
							|| (this._PersonType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonType.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._PersonType.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._Id_PersonType = value.Id;
					}
					else
					{
						this._Id_PersonType = default(int);
					}
					this.SendPropertyChanged("PersonType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonType")]
	public partial class PersonType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PersonType()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonType_Person", Storage="_Persons", ThisKey="Id", OtherKey="Id_PersonType")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonType = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonType = null;
		}
	}
}
#pragma warning restore 1591
